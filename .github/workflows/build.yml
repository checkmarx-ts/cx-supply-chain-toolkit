on: 
    workflow_call:
      inputs:
        tag:
          description: 'The version tag to use for stamping build artifacts and naming generated archives'
          required: true
          type: string
        prerelease:
          description: 'Set to true if published build is a prerelease'
          type: boolean
          required: true
        tag-packages-as-latest:
          description: 'Tag any re-published container images with "latest"'
          type: boolean
          default: true
      secrets:
        PACKAGE_USER:
          required: true
        PACKAGE_PAT:
          required: true
       
env:
  DOCKER_REPO: ghcr.io/${{ github.repository_owner }}/cx-supply-chain-toolkit/enhanced-cxflow-scaresolver
                
jobs:
  publish-enhanced-cxflow:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2          

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ secrets.PACKAGE_USER }}
          password: ${{ secrets.PACKAGE_PAT }}

      - name: Get version stamp from published latest Cx-Flow image
        run: |
            CONTAINER_HASH=$(docker create checkmarx/cx-flow:latest)
            docker cp $CONTAINER_HASH:/app/cx-flow.jar ./cx-flow.jar
            unzip -d ./tmp ./cx-flow.jar META-INF/build-info.properties
            echo "CXFLOW_VERSION=$(cat ./tmp/META-INF/build-info.properties | grep build.version | cut -d '=' -f2)" >> $GITHUB_ENV
            rm -rf ./tmp
            docker rm $CONTAINER_HASH
          
      - name: Fetch Code @ tag ${{ inputs.tag }}
        uses: actions/checkout@v3
        with:
          ref: refs/tags/${{ inputs.tag }}

      - name: Build and Push Docker Image
        run: |
          BRIEFTAG=${{ inputs.tag }}
          FULLTAG=$BRIEFTAG-cxflow-${{ env.CXFLOW_VERSION }}
          docker build -f legacy/enhanced-cxflow-scaresolver/Dockerfile -t $DOCKER_REPO:$FULLTAG -t $DOCKER_REPO:$BRIEFTAG legacy/enhanced-cxflow-scaresolver
          [ ${{ inputs.prerelease }} = false -a ${{ inputs.tag-packages-as-latest }} = true ] && docker tag $DOCKER_REPO:$FULLTAG $DOCKER_REPO:latest || :
          docker push --all-tags $DOCKER_REPO
          docker save -o enhanced-cxflow-scaresolver-$FULLTAG.tar $DOCKER_REPO:$FULLTAG
          zip enhanced-cxflow-scaresolver-$FULLTAG.tar.zip enhanced-cxflow-scaresolver-$FULLTAG.tar
      - name: Upload image tarball
        uses: actions/upload-artifact@v3
        with:
          name: enhanced-cxflow-scaresolver-tarball
          path: enhanced-cxflow-scaresolver*.zip
  

  compile-build-environment-release-zip:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch Code @ tag ${{ inputs.tag }}
        uses: actions/checkout@v3
        with:
          ref: refs/tags/${{ inputs.tag }}
      
      - name: Create Zip
        run: |
          mkdir artifacts
          pushd build-environment
          zip -r ../artifacts/build-environment-${{ inputs.tag }}.zip *
          zip -d ../artifacts/build-environment-${{ inputs.tag }}.zip tests/*
          zip -d ../artifacts/build-environment-${{ inputs.tag }}.zip tests
          popd
      - name: Generate publication notes
        run: |
          echo Checkmarx Supply Chain Toolkit ${{ inputs.tag }}\<P\> > release.md
          echo build-environment-${{ inputs.tag }}.zip SHA256: >> release.md
          sha256sum --tag artifacts/build-environment-${{ inputs.tag }}.zip | sha256sum --tag docs/_main.tex | cut -d "=" -f2 >> release.md
          echo \<P\> >> release.md
          echo docker pull $DOCKER_REPO:${{ inputs.tag }} >> release.md
      - name: Upload build-environment zip
        uses: actions/upload-artifact@v3
        with:
          name: build-environment-zip
          path: artifacts/build-environment-${{ inputs.tag }}.zip
      - name: Upload publication notes
        uses: actions/upload-artifact@v3
        with:
          name: release.md
          path: release.md
  
  compile-manual:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch Code @ tag ${{ inputs.tag }}
        uses: actions/checkout@v3
        with:
          ref: refs/tags/${{ inputs.tag }}
        
      - name: Edit manual's version stamp
        run: echo ${{ inputs.tag }} > docs/version.tex

      - name: Build PDF Manual
        uses: xu-cheng/latex-action@v2
        with:
          root_file: docs/_main.tex
          work_in_root_file_dir: true

      - name: Upload manual
        uses: actions/upload-artifact@v3
        with:
          name: manual
          path: docs/_main.pdf
  
      - name: Build PDF Release Notes
        uses: xu-cheng/latex-action@v2
        with:
          root_file: release_notes/release_notes.tex
          work_in_root_file_dir: true

      - name: Upload release notes
        uses: actions/upload-artifact@v3
        with:
          name: release-notes
          path: release_notes/release_notes.pdf
  
  publish-release:
    runs-on: ubuntu-latest
    needs: [compile-manual, compile-build-environment-release-zip, publish-enhanced-cxflow]
    steps:

      - name: Download manual
        uses: actions/download-artifact@v3
        with:
          name: manual

      - name: Download release notes
        uses: actions/download-artifact@v3
        with:
          name: release-notes

      - name: Download publication notes
        uses: actions/download-artifact@v3
        with:
          name: release.md

      - name: Download build-environment zip
        uses: actions/download-artifact@v3
        with:
          name: build-environment-zip

      - name: Download enhanced-cxflow-scaresolver-tarball
        uses: actions/download-artifact@v3
        with:
          name: enhanced-cxflow-scaresolver-tarball
      
      - name: Rename documentation artifacts
        run: |
          mv _main.pdf cx-supply-chain-toolkit-manual-${{ inputs.tag }}.pdf
          mv release_notes.pdf cx-supply-chain-toolkit-release-notes-${{ inputs.tag }}.pdf
        
      - name: Create GitHub Release
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          artifactErrorsFailBuild: true
          artifacts: ./*.zip,./*.pdf
          artifactContentType: application/zip
          bodyFile: release.md
          name: ${{ inputs.tag }}
          prerelease: ${{ inputs.prerelease }}
          replacesArtifacts: true
          tag: ${{ inputs.tag }}

  artifact-cleanup:
    runs-on: ubuntu-latest
    needs: [publish-release]
    steps:
      - uses: geekyeggo/delete-artifact@v2
        with:
          name: |
            enhanced-cxflow-scaresolver-tarball
            build-environment-zip
            release.md
            release-notes
            manual

         
