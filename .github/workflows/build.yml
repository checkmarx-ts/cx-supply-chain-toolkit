on: 
    workflow_call:
      inputs:
        tag:
          description: 'The version tag to use for stamping build artifacts and naming generated archives'
          required: true
          type: string
        prerelease:
          description: 'Set to true if published build is a prerelease'
          type: boolean
          required: true
        republish:
          required: false
          type: boolean
          default: false
    
      secrets:
        PACKAGE_USER:
          required: true
        PACKAGE_PAT:
          required: true
       
          
jobs:

  publish-enhanced-cxflow:
    runs-on: ubuntu-latest
    env:
      DOCKER_REPO: ghcr.io/${{ github.repository_owner }}/cx-supply-chain-toolkit/enhanced-cxflow-scaresolver
    steps:
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2          

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ secrets.PACKAGE_USER }}
          password: ${{ secrets.PACKAGE_PAT }}

      - name: Get version stamp from published latest Cx-Flow image
        run: |
            CONTAINER_HASH=$(docker create checkmarx/cx-flow:latest)
            docker cp $CONTAINER_HASH:/app/cx-flow.jar ./cx-flow.jar
            unzip -d ./tmp ./cx-flow.jar META-INF/build-info.properties
            echo "CXFLOW_VERSION=$(cat ./tmp/META-INF/build-info.properties | grep build.version | cut -d '=' -f2)" >> $GITHUB_ENV
            rm -rf ./tmp
            docker rm $CONTAINER_HASH
          
      - name: Fetch Code @ tag ${{ inputs.tag }}
        uses: actions/checkout@v3
        with:
          ref: refs/tags/${{ inputs.tag }}

      - name: Build and Push Docker Image
        run: |
          BRIEFTAG=${{ inputs.tag }}
          FULLTAG=$BRIEFTAG-cxflow-${{ env.CXFLOW_VERSION }}
          docker build -f SAST/enhanced-cxflow-scaresolver/Dockerfile -t $DOCKER_REPO:$FULLTAG -t $DOCKER_REPO:$BRIEFTAG SAST/enhanced-cxflow-scaresolver
          [ ${{ inputs.prerelease }} = false ] && docker tag $DOCKER_REPO:$FULLTAG $DOCKER_REPO:latest || :
          docker push --all-tags $DOCKER_REPO
          

    #   - name: Generate publication notes
    #     run: |
    #       echo CxAnalytix v${{ inputs.tag }}\<P\> > release.md
    #       pushd artifacts
    #       sha256sum --tag $(ls *win-x64.zip) >> ../release.md
    #       sha256sum --tag $(ls *linux-x64.zip) >> ../release.md
    #       popd
    #       echo \<P\> >> release.md
    #       echo docker pull $DOCKER_REPO:v${{ inputs.tag }} >> release.md

    #   - name: Edit manual's version stamp
    #     run: echo ${{ inputs.tag }} > manual/version.tex

    #   - name: Build PDF Manual
    #     uses: xu-cheng/latex-action@v2
    #     with:
    #       root_file: manual/cxanalytix.tex
    #       work_in_root_file_dir: true

    #   - name: Build PDF Release Notes
    #     uses: xu-cheng/latex-action@v2
    #     with:
    #       root_file: release_notes/release_notes.tex
    #       work_in_root_file_dir: true
      
    #   - name: Move documentation artifacts
    #     run: |
    #       mv manual/cxanalytix.pdf artifacts/CxAnalytix_Manual_${{ inputs.tag }}.pdf
    #       mv release_notes/release_notes.pdf artifacts/CxAnalytix_ReleaseNotes_${{ inputs.tag }}.pdf


    #   - name: Create GitHub Release
    #     id: create_release
    #     uses: ncipollo/release-action@v1
    #     with:
    #       allowUpdates: true
    #       artifactErrorsFailBuild: true
    #       artifacts: artifacts/*.zip
    #       artifactContentType: application/zip
    #       bodyFile: release.md
    #       name: v${{ inputs.tag }}
    #       prerelease: ${{ inputs.prerelease }}
    #       replacesArtifacts: true
    #       tag: v${{ inputs.tag }}
          
    #   - name: Update Documentation for GitHub Release
    #     id: update_release
    #     uses: ncipollo/release-action@v1
    #     with:
    #       allowUpdates: true
    #       artifactErrorsFailBuild: true
    #       artifacts: artifacts/*.pdf
    #       artifactContentType: application/pdf
    #       omitBodyDuringUpdate: true
    #       name: v${{ inputs.tag }}
    #       omitNameDuringUpdate: true
    #       prerelease: ${{ inputs.prerelease }}
    #       replacesArtifacts: false
    #       removeArtifacts: false
    #       tag: v${{ inputs.tag }}
          
